import asyncio

from aiogram import Dispatcher, types
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

acceptedCargos = 0
cargoNumbers = [72121022, 12102006, 78151290, 55005321]


class Answers(StatesGroup):
    flyControl = State()
    heightKilometres = State()
    updateSoftware = State()
    cargoDumping = State()
    autoPilot = State()


async def showAdminPanel(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–æ–º", callback_data="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–æ–º"),
        types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û", callback_data="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û"),
        types.InlineKeyboardButton(text="–°–±—Ä–æ—Å –≥—Ä—É–∑–∞", callback_data="–°–±—Ä–æ—Å –≥—Ä—É–∑–∞ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞"),
        types.InlineKeyboardButton(text="–î–∞–Ω–Ω—ã–µ", callback_data="–î–∞–Ω–Ω—ã–µ"),
        types.InlineKeyboardButton(text="–†–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞", callback_data="–†–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer(text="üîß‚öôÔ∏è–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–êüî©üîå\n\n"
                              "–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üßë‚Äçüîß\n"
                              "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                              "- –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å—Ç–∞–Ω—Ü–∏–∏ üõ∞\n"
                              "- –†–∞–±–æ—Ç–∞—Ç—å —Å –û–° —Å–ø—É—Ç–Ω–∏–∫–∞ üíΩ\n"
                              "- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≥—Ä—É–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é üì©\n"
                              "- –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏ üìä\n"
                              "- –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ç–∞–Ω—Ü–∏—é –≤ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ ü§ñ\n\n"
                              "‚ÄºÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ÄºÔ∏è\n"
                              "–ö–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–º–µ–µ—Ç –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é, –ª–∏—à—å —á–µ—Ç–∫–æ –ø–æ–Ω–∏–º–∞—è –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è",
                           reply_markup=keyboard)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–æ–º"
async def callbackFlyControl(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="–ü–æ–¥—Å–∫–∞–∑–∫–∞1"))
    await call.message.answer(text="üöÄ–í–•–û–î –í –¶–ï–ù–¢–† –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–ï–¢–û–úüöÄ\n"
                                   "–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ üóù\n"
                                   "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Å–∫–∞–∑–∫–∞', –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 9 –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ ‚û°Ô∏è",
                              reply_markup=keyboard)

# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Å–∫–∞–∑–∫–∞" –≤ —Ä–µ–∂–∏–º–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞–º–∏"
async def callbackHint_FlyControl(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–∞—à–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞: 49.272598, -123.132872 v√°ros?\n"
                              "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚û°Ô∏è")
    await Answers.flyControl.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–æ–º"
async def processFlyControl(message: types.Message, state: FSMContext):
    await state.finish()
    if message.text.lower() != 'vancouver':
        await message.reply('‚ÄºÔ∏è–ö–ª—é—á –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–µ–Ω‚ÄºÔ∏è\n'
                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚û°Ô∏è')
        await Answers.flyControl.set()
        return
    await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ ‚úÖ\n'
                    '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –≤—ã—Å–æ—Ç—É –ø–æ–ª–µ—Ç–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö ‚û°Ô∏è')
    await Answers.heightKilometres.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ—Ç—ã –Ω–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–æ–º"
async def processHeight(message: types.Message, state: FSMContext):
    await state.finish()
    if int(message.text) < 35000:
        await message.reply('–°–ª–∏—à–∫–æ–º –º–∞–ª–∞—è –≤—ã—Å–æ—Ç–∞! –£–≥—Ä–æ–∑–∞ —Å–≤–∞–ª–∏–≤–∞–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤—ã—Å–æ—Ç—É')
    elif int(message.text) > 45000:
        await message.reply('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –≤—ã—Å–æ—Ç–∞! –£–≥—Ä–æ–∑–∞ –ø–æ—Ç–µ—Ä–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ —Å—Ç–∞–Ω—Ü–∏–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤—ã—Å–æ—Ç—É')
    else:
        await message.reply('–í—ã—Å–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –æ—Ä–±–∏—Ç—ã')
    await showAdminPanel(message)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û"
async def callbackUpdateSoftware(call: types.CallbackQuery):
    await call.message.answer("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–π —Å–µ—Ç–∏ üì°üõ∞\n"
                              "üì∂–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –ø–æ–¥–ª–∫—é—á–µ–Ω–∏—éüì∂")
    await call.message.answer('üõ∞–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–ø—É—Ç–Ω–∏–∫–æ–≤üõ∞')
    await asyncio.sleep(2)
    await call.message.answer('üåê–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—èüåê')
    await asyncio.sleep(2)
    await call.message.answer('üí¨–û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏üí¨')
    await asyncio.sleep(2)
    await call.message.answer('‚ùå–°–û–û–ë–©–ï–ù–ò–ï –ù–ï –ü–†–ò–ù–Ø–¢–û‚ùå')
    await asyncio.sleep(2)
    await call.message.answer("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å üö´\n"
                              "–£–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±—É–∫–≤—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –ø–∞—Ä–æ–ª—å: –° –¢ –¢ –ê –† –ö –ï –° –ï\n"
                              "*Ô∏è‚É£ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –≤ –≤–µ—Ä–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É *Ô∏è‚É£\n"
                              "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è –ø–∞—Ä–æ–ª—å ‚û°Ô∏è")
    await Answers.updateSoftware.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û"
async def processUpdateSoftware(message: types.Message, state: FSMContext):
    await state.finish()
    if message.text.lower() != '—Ç–µ—Å—Å–µ—Ä–∞–∫—Ç':
        await message.reply('‚ùå–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å‚ùå\n'
                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é ‚û°Ô∏è')
        await Answers.updateSoftware.set()
        return
    await message.reply('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ! ‚úÖ\n'
                        '–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    await asyncio.sleep(1.5)
    await message.answer('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 5%')
    await asyncio.sleep(2)
    await message.answer('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 15%')
    await asyncio.sleep(2)
    await message.answer('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 25%')
    await asyncio.sleep(2)
    await message.answer('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 50%')
    await asyncio.sleep(1)
    await message.answer('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 53%')
    await asyncio.sleep(0.5)
    await message.answer('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 59%')
    await asyncio.sleep(5)
    await message.answer('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 99%')
    await asyncio.sleep(2)
    await message.answer('üì≥–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—èüì≥')
    await asyncio.sleep(5)
    await message.answer('‚úÖ –ü—Ä–æ–≥—Ä–∞–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')
    await asyncio.sleep(2)
    await showAdminPanel(message)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–±—Ä–æ—Å –≥—Ä—É–∑–∞"
async def callbackCargoDumping(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="–î–∞–Ω–Ω—ã–µ", callback_data="data"))
    # await Answers.cargoDumping.set()
    await call.message.answer("–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≥—Ä—É–∑—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–æ–º–µ—Ä–∞ –∏—Ö –≥—Ä—É–∑–æ–≤. –û–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ —Ñ–∞–π–ª–µ —Å –¥–∞–Ω–Ω—ã–º–∏.\n"
                              "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–∞–Ω–Ω—ã–µ', –∏–∑—É—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –∞ –ø–æ—Å–ª–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\n"
                              "–í–∞–∂–Ω–æ, —á—Ç–æ –∑–∞ —Ä–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –†–û–í–ù–û 4 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.",
    reply_markup=keyboard)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–Ω–Ω—ã–µ"
async def callback_Data(call: types.CallbackQuery):
    await call.message.answer('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: 2022.10.12 06:00:03')
    xls_path = "data.xlsx"
    await call.message.answer_document(InputFile(xls_path))
    await Answers.cargoDumping.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ "–°–±—Ä–æ—Å –≥—Ä—É–∑–∞"
async def processCargoDumping(message: types.Message, state: FSMContext):
    await state.finish()
    global cargoNumbers
    if message.text.isdigit() is False or int(message.text) not in cargoNumbers:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è')
        await Answers.cargoDumping.set()
        return
    cargoNumbers.remove(int(message.text))
    if len(cargoNumbers) != 0:
        await message.reply('–ì—Ä—É–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ! –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä')
        await Answers.cargoDumping.set()
        return
    await message.answer('–ù–∞–±–æ—Ä –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 42 —á–∞—Å–∞')
    await showAdminPanel(message)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–Ω–Ω—ã–µ"
async def callbackData(call: types.CallbackQuery):
    xls_path = "data.xlsx"
    await call.message.answer_document(InputFile(xls_path))
    await showAdminPanel(call.message)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞"
async def callbackAutopilot(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(types.InlineKeyboardButton(text="–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data="–ü–æ–¥—Å–∫–∞–∑–∫–∞2"))
    await call.message.answer(f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è!\n"
                              f"\n"
                              r"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Å–∫–∞–∑–∫–∞', –∞ –ø–æ—Å–ª–µ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 9 –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:",
                              reply_markup=keyboard)


# –ö–æ–ª–±—ç–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Å–∫–∞–∑–∫–∞" –≤ —Ä–µ–∂–∏–º–µ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞–º–∏"
async def callbackHint_Autopilot(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("49.272598, -123.132872 v√°ros?")
    await Answers.autoPilot.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ "–†–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞"
async def processAutopilot(message: types.Message, state: FSMContext):
    await state.finish()
    if message.text.lower() != 'vancouver':
        await message.reply('–ö–ª—é—á –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        await Answers.autoPilot.set()
        return
    await message.reply('–°—Ç–∞–Ω—Ü–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞. –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ. '
                        '–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞')
    # –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —Å—Ç–∞–¥–∏—è –∫–≤–µ—Å—Ç–∞
    await asyncio.sleep(180)
    await message.answer('–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏! '
                         '–î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –≥—Ä—É–∑–æ–≤—ã—Ö –æ—Ç—Å–µ–∫–æ–≤')
    await asyncio.sleep(60)
    await message.answer("""
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–∑–æ–≤:
    43.400330, 39.974873
    43.595834, 39.929211
    44.606875, 39.992500
    45.254240, 39.674883
    """)
    await message.answer('–û–¥–∏–Ω –∏–∑ –≥—Ä—É–∑–æ–≤ –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è —Ä—è–¥–æ–º —Å –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.'
                         '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.'
                         '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±–µ')


def register_handlers_adminPanel(dp: Dispatcher):
    dp.register_callback_query_handler(callbackFlyControl, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—ë—Ç–æ–º")
    dp.register_callback_query_handler(callbackHint_FlyControl, text="–ü–æ–¥—Å–∫–∞–∑–∫–∞1")
    dp.register_message_handler(processFlyControl, state=Answers.flyControl)
    dp.register_message_handler(processHeight, state=Answers.heightKilometres)
    dp.register_callback_query_handler(callbackUpdateSoftware, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ü–û")
    dp.register_message_handler(processUpdateSoftware, state=Answers.updateSoftware)
    dp.register_callback_query_handler(callbackCargoDumping, text="–°–±—Ä–æ—Å –≥—Ä—É–∑–∞ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∞")
    dp.register_callback_query_handler(callback_Data, text ="data")
    dp.register_message_handler(processCargoDumping, state=Answers.cargoDumping)
    dp.register_callback_query_handler(callbackData, text="–î–∞–Ω–Ω—ã–µ")
    dp.register_callback_query_handler(callbackAutopilot, text="–†–µ–∂–∏–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞")
    dp.register_callback_query_handler(callbackHint_Autopilot, text="–ü–æ–¥—Å–∫–∞–∑–∫–∞2")
    dp.register_message_handler(processAutopilot, state=Answers.autoPilot)